// Mocks generated by Mockito 5.4.4 from annotations
// in professional_development/test/features/contributions/create/presentation/stores/create_contribution_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:professional_development/core/arch/failures/failures.dart'
    as _i6;
import 'package:professional_development/features/contributions/create/domain/repositories/create_contribution_repository.dart'
    as _i2;
import 'package:professional_development/features/contributions/create/domain/usecases/create_contribution_use_case.dart'
    as _i4;
import 'package:professional_development/features/contributions/list/domain/entities/contributions_entity.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCreateContributionRepository_0 extends _i1.SmartFake
    implements _i2.CreateContributionRepository {
  _FakeCreateContributionRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateContributionUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateContributionUsecase extends _i1.Mock
    implements _i4.CreateContributionUsecase {
  @override
  _i2.CreateContributionRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCreateContributionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCreateContributionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CreateContributionRepository);

  @override
  _i5.Future<
      _i3.Either<_i6.ServerFailureWithMessage, _i7.ContributionEntity>> call(
          _i4.CreateContributionParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<
                _i3.Either<_i6.ServerFailureWithMessage,
                    _i7.ContributionEntity>>.value(
            _FakeEither_1<_i6.ServerFailureWithMessage, _i7.ContributionEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i5.Future<
                _i3.Either<_i6.ServerFailureWithMessage,
                    _i7.ContributionEntity>>.value(
            _FakeEither_1<_i6.ServerFailureWithMessage, _i7.ContributionEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<
          _i3.Either<_i6.ServerFailureWithMessage, _i7.ContributionEntity>>);
}
